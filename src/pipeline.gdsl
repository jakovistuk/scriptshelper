
//The global script scope
def ctx = context(scope: scriptScope())

//What things can be on the script scope
contributor(ctx) {
    method(name: 'pipeline', type: 'Object', params: [body: Closure])
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
}

// Define default env vars
def envVars = context(ctype: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')

contributor(envVars) {
    property(name: 'BRANCH_NAME', type: 'String', doc: 'For a multibranch project, this will be set to the name of the branch being built, for example in case you wish to deploy to production from master but not from feature branches; if corresponding to some kind of change request, the name is generally arbitrary (refer to CHANGE_ID and CHANGE_TARGET).')
    property(name: 'CHANGE_ID', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the change ID, such as a pull request number, if supported; else unset.')
    property(name: 'CHANGE_URL', type: 'Strig', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the change URL, if supported; else unset.')
    property(name: 'CHANGE_TITLE', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the title of the change, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the username of the author of the proposed change, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR_DISPLAY_NAME', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the human name of the author, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR_EMAIL', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the email address of the author, if supported; else unset.')
    property(name: 'CHANGE_TARGET', type: 'String', doc: 'rFo a multibranch project corresponding to some kind of change request, this will be set to the target or base branch to which the change could be merged, if supported; else unset.')
    property(name: 'BUILD_NUMBER', type: 'String', doc: 'The current build number, such as "153"')
    property(name: 'BUILD_ID', type: 'String', doc: 'The current build ID, identical to BUILD_NUMBER for builds created in 1.597+, but a YYYY-MM-DD_hh-mm-ss timestamp for older builds')
    property(name: 'BUILD_DISPLAY_NAME', type: 'String', doc: 'The display name of the current build, which is something like "#153" by default.')
    property(name: 'JOB_NAME', type: 'String', doc: 'Name of the project of this build, such as "foo" or "foo/bar".')
    property(name: 'JOB_BASE_NAME', type: 'String', doc: 'Short Name of the project of this build stripping off folder paths, such as "foo" for "bar/foo".')
    property(name: 'BUILD_TAG', type: 'String', doc: 'String of "jenkins-${JOB_NAME}-${BUILD_NUMBER}". All forward slashes (/) in the JOB_NAME are replaced with dashes (-). Convenient to put into a resource file, a jar file, etc for easier identification.')
    property(name: 'EXECUTOR_NUMBER', type: 'String', doc: 'The unique number that identifies the current executor (among executors of the same machine) thatâ€™s carrying out this build. This is the number you see in the "build executor status", except that the number starts from 0, not 1.')
    property(name: 'NODE_NAME', type: 'String', doc: 'Name of the agent if the build is on an agent, or "master" if run on master')
    property(name: 'NODE_LABELS', type: 'String', doc: 'Whitespace-separated list of labels that the node is assigned.')
    property(name: 'WORKSPACE', type: 'String', doc: 'The absolute path of the directory assigned to the build as a workspace.')
    property(name: 'JENKINS_HOME', type: 'String', doc: 'The absolute path of the directory assigned on the master node for Jenkins to store data.')
    property(name: 'JENKINS_URL', type: 'String', doc: 'Full URL of Jenkins, like http://server:port/jenkins/ (note: only available if Jenkins URL set in system configuration)')
    property(name: 'BUILD_URL', type: 'String', doc: 'Full URL of this build, like http://server:port/jenkins/job/foo/15/ (Jenkins URL must be set)')
    property(name: 'JOB_URL', type: 'String', doc: 'Full URL of this job, like http://server:port/jenkins/job/foo/ (Jenkins URL must be set)')
}

// Definew all the properties in current builds
def currentBuild = context(ctype: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')

contributor(currentBuild) {
    property(name: 'number', type: 'Integer', doc: 'build number')
    property(name: 'result', type: 'String', doc: 'typically SUCCESS, UNSTABLE, or FAILURE (may be null for an ongoing build)')
    property(name: 'currentResult', type: 'String', doc: 'typically SUCCESS, UNSTABLE, or FAILURE (never null)')
    method(name: 'resultIsBetterOrEqualTo', type: 'Boolean', params: [buildStatus: 'String'], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is better than or equal to the provided result.')
    method(name: 'resultIsWorseOrEqualTo', type: 'Boolean', params: [buildStatus: 'String'], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is worse than or equal to the provided result.')
    property(name: 'displayName', type: 'String', doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
    property(name: 'description', type: 'String', doc: 'additional information about the build')
    property(name: 'id', type: 'String', doc: 'normally number as a string')
    property(name: 'timeInMillis', type: 'long', doc: 'time since the epoch when the build was scheduled')
    property(name: 'startTimeInMillis', type: 'long', doc: 'time since the epoch when the build started running')
    property(name: 'duration', type: 'long', doc: 'duration of the build in milliseconds')
    property(name: 'durationString', type: 'String', doc: 'a human-readable representation of the build duration')
    property(name: 'previousBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder', doc: 'another similar object, or null')
    property(name: 'nextBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder', doc: 'another similar object, or null')
    property(name: 'absoluteUrl', type: 'String', doc: 'URL of build index page')
    property(name: 'buildVariables', type: 'Map', doc: 'for a non-Pipeline downstream build, offers access to a map of defined build variables; for a Pipeline downstream build, any variables set globally on env')
    property(name: 'changeSets', type: 'String', doc: 'a list of changesets coming from distinct SCM checkouts; each has a kind and is a list of commits; each commit has a commitId, timestamp, msg, author, and affectedFiles each of which has an editType and path; the value will not generally be Serializable so you may only access it inside a method marked @NonCPS')
    property(name: 'rawBuild', type: 'String', doc: 'a hudson.model.Run with further APIs, only for trusted libraries or administrator-approved scripts outside the sandbox; the value will not be Serializable so you may only access it inside a method marked @NonCPS')
}

def closures = context(scope: closureScope())

contributor(closures) {
    // What things can be inside a pipeline
    if (enclosingCall("pipeline")) {
        method(name: 'echo', type: 'Object', params: [message: 'java.lang.String'], doc: 'Print Message')
        method(name: 'stages', type: 'Object', params: [body: 'Closure'], doc: 'Stages')
        method(name: 'agent', type: 'Object', params: [body: 'java.lang.String'])
        method(name: 'agent', type: 'Object', params: [body: 'Closure'], doc: 'Label expression to select agents')
        method(name: 'parameters', type: 'Object', params: [body: 'Closure'], doc: 'Job parameters')
        method(name: 'environment', type: 'Object', params: [body: 'Closure'], doc: 'Job environment')
        method(name: 'options', type: 'Object', params: [body: 'Closure'])
        method(name: 'triggers', type: 'Object', params: [body: 'Closure'], doc: 'Build triggers')
        method(name: 'post', type: 'Object', params: [body: 'Closure'], doc: 'Post build actions')
        method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'),], doc: 'JIRA: Add a comment to issue(s)')
        method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
        method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'),], doc: 'JIRA: Issue selector')
        method(name: 'jiraSearch', type: 'Object', params: [jql: 'java.lang.String'], doc: 'JIRA: Search issues')

        //I  don't know the fate of these one
        method(name: 'build', type: 'Object', params: [job: 'java.lang.String'], doc: 'Build a job')
        method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'),], doc: 'Build a job')
        method(name: 'ec2', type: 'Object', namedParams: [parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'),], doc: 'Cloud template provisioning')
        method(name: 'error', type: 'Object', params: [message: 'java.lang.String'], doc: 'Error signal')
        method(name: 'input', type: 'Object', params: [message: 'java.lang.String'], doc: 'Wait for interactive input')
        method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'),], doc: 'Wait for interactive input')
        method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
        method(name: 'library', type: 'Object', params: [identifier: 'java.lang.String'], doc: 'Load a shared library on the fly')
        method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'),], doc: 'Load a shared library on the fly')
        method(name: 'libraryResource', type: 'Object', params: [resource: 'java.lang.String'], doc: 'Load a resource file from a shared library')
        method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'),], doc: 'Mail')
        method(name: 'milestone', type: 'Object', params: [ordinal: 'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'),], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'node', type: 'Object', params: [body: 'Closure'], doc: 'Allocate node')
        method(name: 'node', type: 'Object', params: [label: 'String', body: 'Closure'], doc: 'Allocate node')
        method(name: 'properties', type: 'Object', params: [properties: 'Map'], doc: 'Set job properties')
        method(name: 'readTrusted', type: 'Object', params: [path: 'java.lang.String'], doc: 'Read trusted file from SCM')
        method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'),], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
        method(name: 'retry', type: 'Object', params: [count: int, body: 'Closure'], doc: 'Retry the body up to N times')
        method(name: 'script', type: 'Object', params: [body: 'Closure'], doc: 'Run arbitrary Pipeline script')
        method(name: 'sleep', type: 'Object', params: [time: 'int'], doc: 'Sleep')
        method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Sleep')
        method(name: 'timeout', type: 'Object', params: [time: int, body: 'Closure'], doc: 'Enforce time limit')
        method(name: 'timeout', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Enforce time limit')
        method(name: 'tool', type: 'Object', params: [name: 'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'),], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'waitUntil', type: 'Object', params: [body: 'Closure'], doc: 'Wait for condition')
        method(name: 'withCredentials', type: 'Object', params: [bindings: Map, body: 'Closure'], doc: 'Bind credentials to variables')
        method(name: 'withEnv', type: 'Object', params: [overrides: Map, body: 'Closure'], doc: 'Set environment variables')
        method(name: 'ws', type: 'Object', params: [dir: 'String', body: 'Closure'], doc: 'Allocate workspace')
        method(name: 'catchError', type: 'Object', params: [body: 'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
        method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId: 'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
        method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'),], doc: 'Record trace of a Docker image run in a container')
        method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'),], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
        method(name: 'getContext', type: 'Object', params: [type: 'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
        method(name: 'withContext', type: 'Object', params: [context: 'Object', body: 'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')

    }

    //The only thing inside agent can be label
    if (enclosingCall("agent")) {
        property(name: 'any')
        property(name: 'none')
        method(name: 'label', type: 'String', params: [expr: 'String'])
        method(name: 'docker', type: 'String', params: [body: Closure])
        method(name: 'docker', type: 'String', params: [docker_image: 'String'])
        method(name: 'dockerfile', type: 'boolean', params: [use_dockerfile: 'boolean'])
        method(name: 'kubernetes', type: 'String', params: [body: Closure])
    }

    if (enclosingCall("dockerfile")) {
        method(name: 'filename', type: 'String', params: [expr: 'String'])
        method(name: 'dir', type: 'String', params: [expr: 'String'])
        method(name: 'label', type: 'String', params: [label: 'String'])
        method(name: 'registryUrl', type: 'String', params: [registy: 'String'])
        method(name: 'registryCredentialsId', type: 'String', params: [credentialId: 'String'])
    }

    if (enclosingCall("docker")) {
        method(name: 'image', type: 'String', params: [image_name: 'String'])
        method(name: 'args', type: 'String', params: [args: 'String'])
        method(name: 'label', type: 'String', params: [label: 'String'])
        method(name: 'registryUrl', type: 'String', params: [registy: 'String'])
        method(name: 'registryCredentialsId', type: 'String', params: [credentialId: 'String'])
    }

    if (enclosingCall("kubernetes")) {
        method(name: 'label', type: 'String', params: [expr: 'String'])
        method(name: 'yaml', type: 'String', params: [expr: 'String'])
    }

    if (enclosingCall("environment")) {
        method(name: 'credentials', type: 'String', params: [credentialId: 'String'])
    }

    if (enclosingCall("triggers")) {
        method(name: 'cron', type: 'String', params: [expr: 'String'], doc: 'Cron expression can be one of @daily, @hourly, etc')
        method(name: 'upstream', type: 'Object', params: [name: 'String', build_status: 'Object'])
        method(name: 'pollSCM', type: 'String', params: [expr: 'String'])
        method(name: 'bitbucketPush')
    }

    // Parameters can only contain
    if (enclosingCall("parameters")) {
        method(name: 'string', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String')])
        method(name: 'booleanParam', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: 'java.lang.String')])
        method(name: 'choice', type: 'Object', namedParams: [parameter(name: 'choice', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: 'java.lang.String')])
    }

    // Find the options!
    if (enclosingCall("options")) {
        method(name: 'buildDiscarder')
        method(name: 'timestamps')
        method(name: 'skipDefaultCheckout')
        method(name: 'lock', type: 'String', params: [type: 'java.lang.String'])
        method(name: 'ansiColor', type: 'String', params: [type: 'java.lang.String'])
        method(name: 'timeout', type: 'Object', namedParams: [parameter(name: 'time', type: 'java.lang.Integer'), parameter(name: 'unit', type: 'java.lang.String')])
    }

    // Inside stages can be, stage or stage('Name')
    if (enclosingCall("stages")) {
        method(name: 'stage', type: 'Object', params: [name: 'String', body: 'Closure'], doc: 'Stage')
        method(name: 'stage', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'),], doc: 'Stage')
    }

    // Inside steps only steps
    if (enclosingCall("stage")) {
        method(name: 'agent', type: 'Object', params: [body: 'Closure'], doc: 'Label expression to select agents')
        method(name: 'steps', type: 'Object', params: [body: 'Closure'], doc: 'Steps to execute on stage')
        method(name: 'post', type: 'Object', params: [body: 'Closure'], doc: 'Post actions can be executed on a per-stage basis as well')
    }

    // Only inside steps
    if (enclosingCall("steps") || enclosingCall("always") || enclosingCall("success") ||
            enclosingCall("failure") || enclosingCall("unstable") || enclosingCall("changed") ||
            enclosingCall("cleanup")) {
        method(name: 'parallel', type: 'Object', params: ['closures':'java.util.Map'], doc: 'Execute in parallel')
        method(name: 'parallel', type: 'Object', namedParams: [parameter(name: 'closures', type: 'java.util.Map'), parameter(name: 'failFast', type: 'boolean'), ], doc: 'Execute in parallel')
        method(name: 'acceptGitLabMR', type: 'Object', params: [:], doc: 'Accept GitLab Merge Request')
        method(name: 'acceptGitLabMR', type: 'Object', namedParams: [parameter(name: 'mergeCommitMessage', type: 'java.lang.String'), parameter(name: 'useMRDescription', type: 'boolean'), parameter(name: 'removeSourceBranch', type: 'boolean'), ], doc: 'Accept GitLab Merge Request')
        method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', params: [id:'java.lang.String'], doc: 'Add an Embeddable Badge Configuration')
        method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'animatedOverlayColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), ], doc: 'Add an Embeddable Badge Configuration')
        method(name: 'addGitLabMRComment', type: 'Object', params: [:], doc: 'Add comment on GitLab Merge Request')
        method(name: 'addGitLabMRComment', type: 'Object', namedParams: [parameter(name: 'comment', type: 'java.lang.String'), ], doc: 'Add comment on GitLab Merge Request')
        method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
        method(name: 'awaitDeploymentCompletion', type: 'Object', params: [deploymentId:'java.lang.String'], doc: 'Wait for AWS CodeDeploy deployment completion')
        method(name: 'awsIdentity', type: 'Object', params: [:], doc: 'Print and return the AWS identity')
        method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
        method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
        method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
        method(name: 'catchError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
        method(name: 'cfInvalidate', type: 'Object', namedParams: [parameter(name: 'distribution', type: 'java.lang.String'), parameter(name: 'paths', type: 'Map'), parameter(name: 'waitForCompletion', type: 'boolean'), ], doc: 'Invalidate given paths in CloudFront distribution')
        method(name: 'cfnDelete', type: 'Object', params: [stack:'java.lang.String'], doc: 'Delete CloudFormation stack')
        method(name: 'cfnDelete', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'long'), parameter(name: 'timeoutInMinutes', type: 'long'), ], doc: 'Delete CloudFormation stack')
        method(name: 'cfnDeleteStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Delete CloudFormation Stack Set')
        method(name: 'cfnDeleteStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), ], doc: 'Delete CloudFormation Stack Set')
        method(name: 'cfnDescribe', type: 'Object', params: [stack:'java.lang.String'], doc: 'Describe outputs of CloudFormation stack')
        method(name: 'cfnExecuteChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), ], doc: 'Execute CloudFormation change set')
        method(name: 'cfnExports', type: 'Object', params: [:], doc: 'Describe CloudFormation global exports')
        method(name: 'cfnUpdateStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Create or Update CloudFormation Stack Set')
        method(name: 'cfnUpdateStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'administratorRoleArn', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'executionRoleName', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'operationPreferences', type: 'Map'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation Stack Set')
        method(name: 'deployAPI', type: 'Object', namedParams: [parameter(name: 'api', type: 'java.lang.String'), parameter(name: 'stage', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'variables', type: 'Map'), ], doc: 'Deploy the given API Gateway API')
        method(name: 'dockerNode', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
        method(name: 'dockerNode', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'connector', type: 'Map'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'dockerHost', type: 'java.lang.String'), parameter(name: 'remoteFs', type: 'java.lang.String'), ], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
        method(name: 'ec2ShareAmi', type: 'Object', params: [:], doc: 'Share an AMI with other accounts')
        method(name: 'ec2ShareAmi', type: 'Object', namedParams: [parameter(name: 'accountIds', type: 'java.util.List'), parameter(name: 'amiId', type: 'java.lang.String'), ], doc: 'Share an AMI with other accounts')
        method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
        method(name: 'ecrDeleteImage', type: 'Object', params: [:], doc: 'Delete ecr images')
        method(name: 'ecrDeleteImage', type: 'Object', namedParams: [parameter(name: 'imageIds', type: 'java.util.List'), parameter(name: 'registryId', type: 'java.lang.String'), parameter(name: 'repositoryName', type: 'java.lang.String'), ], doc: 'Delete ecr images')
        method(name: 'ecrListImages', type: 'Object', params: [:], doc: 'List ECR Images')
        method(name: 'ecrListImages', type: 'Object', namedParams: [parameter(name: 'filter', type: 'Map'), parameter(name: 'registryId', type: 'java.lang.String'), parameter(name: 'repositoryName', type: 'java.lang.String'), ], doc: 'List ECR Images')
        method(name: 'ecrLogin', type: 'Object', params: [:], doc: 'Create and return the ECR login string')
        method(name: 'ecrLogin', type: 'Object', namedParams: [parameter(name: 'email', type: 'java.lang.Boolean'), ], doc: 'Create and return the ECR login string')
        method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
        method(name: 'gitlabBuilds', type: 'Object', params: [body:'Closure'], doc: 'Notify gitlab about pending builds')
        method(name: 'gitlabBuilds', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'builds', type: 'java.util.List'), ], doc: 'Notify gitlab about pending builds')
        method(name: 'gitlabCommitStatus', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Update the commit status in GitLab depending on the build status')
        method(name: 'gitlabCommitStatus', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'builds', type: 'java.util.List'), parameter(name: 'connection', type: 'Map'), ], doc: 'Update the commit status in GitLab depending on the build status')
        method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
        method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'java.util.List'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'multipartName', type: 'java.lang.String'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'uploadFile', type: 'java.lang.String'), parameter(name: 'useSystemProperties', type: 'java.lang.Boolean'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
        method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
        method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
        method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
        method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'JIRA: Add a comment to issue(s)')
        method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
        method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'JIRA: Issue selector')
        method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA: Search issues')
        method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
        method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
        method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
        method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
        method(name: 'listAWSAccounts', type: 'Object', params: [:], doc: 'List all AWS accounts of the organization')
        method(name: 'listAWSAccounts', type: 'Object', namedParams: [parameter(name: 'parent', type: 'java.lang.String'), ], doc: 'List all AWS accounts of the organization')
        method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
        method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'java.util.List'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
        method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
        method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
        method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
        method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
        method(name: 'properties', type: 'Object', params: [properties:'java.util.List'], doc: 'Set job properties')
        method(name: 'readCSV', type: 'Object', params: [:], doc: 'Read content from a CSV file in the workspace.')
        method(name: 'readCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'format', type: 'Map'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read content from a CSV file in the workspace.')
        method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
        method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
        method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
        method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
        method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
        method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
        method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
        method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
        method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
        method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'java.util.List'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
        method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
        method(name: 's3Copy', type: 'Object', namedParams: [parameter(name: 'fromBucket', type: 'java.lang.String'), parameter(name: 'fromPath', type: 'java.lang.String'), parameter(name: 'toBucket', type: 'java.lang.String'), parameter(name: 'toPath', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'sseAlgorithm', type: 'java.lang.String'), ], doc: 'Copy file between S3 buckets')
        method(name: 's3Delete', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Delete file from S3')
        method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
        method(name: 'setAccountAlias', type: 'Object', params: [name:'java.lang.String'], doc: 'Set the AWS account alias')
        method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
        method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
        method(name: 'snsPublish', type: 'Object', namedParams: [parameter(name: 'topicArn', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'messageAttributes', type: 'java.util.Map'), ], doc: 'Publish notification to SNS')
        method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
        method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
        method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
        method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
        method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
        method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'unstable', type: 'Object', params: [message:'java.lang.String'], doc: 'Set stage result to unstable')
        method(name: 'updateGitlabCommitStatus', type: 'Object', params: [:], doc: 'Update the commit status in GitLab')
        method(name: 'updateGitlabCommitStatus', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Update the commit status in GitLab')
        method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
        method(name: 'warnError', type: 'Object', params: [message:java.lang.String, body:'Closure'], doc: 'Catch error and set build and stage result to unstable')
        method(name: 'warnError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), ], doc: 'Catch error and set build and stage result to unstable')
        method(name: 'withAWS', type: 'Object', params: [body:'Closure'], doc: 'set AWS settings for nested block')
        method(name: 'withAWS', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.lang.String'), parameter(name: 'duration', type: 'java.lang.Integer'), parameter(name: 'endpointUrl', type: 'java.lang.String'), parameter(name: 'externalId', type: 'java.lang.String'), parameter(name: 'federatedUserId', type: 'java.lang.String'), parameter(name: 'iamMfaToken', type: 'java.lang.String'), parameter(name: 'policy', type: 'java.lang.String'), parameter(name: 'principalArn', type: 'java.lang.String'), parameter(name: 'profile', type: 'java.lang.String'), parameter(name: 'region', type: 'java.lang.String'), parameter(name: 'role', type: 'java.lang.String'), parameter(name: 'roleAccount', type: 'java.lang.String'), parameter(name: 'roleSessionName', type: 'java.lang.String'), parameter(name: 'samlAssertion', type: 'java.lang.String'), ], doc: 'set AWS settings for nested block')
        method(name: 'withCredentials', type: 'Object', params: [bindings:java.util.List, body:'Closure'], doc: 'Bind credentials to variables')
        method(name: 'withEnv', type: 'Object', params: [overrides:java.util.List, body:'Closure'], doc: 'Set environment variables')
        method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
        method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
        method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
        method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
        method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
        method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
        method(name: 'podTemplate', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Define a podTemplate to use in the kubernetes plugin')
        method(name: 'podTemplate', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'activeDeadlineSeconds', type: 'int'), parameter(name: 'annotations', type: 'java.util.List'), parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'containers', type: 'java.util.List'), parameter(name: 'envVars', type: 'java.util.List'), parameter(name: 'idleMinutes', type: 'int'), parameter(name: 'imagePullSecrets', type: 'java.util.List'), parameter(name: 'inheritFrom', type: 'java.lang.String'), parameter(name: 'instanceCap', type: 'int'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'nodeSelector', type: 'java.lang.String'), parameter(name: 'nodeUsageMode', type: 'java.lang.String'), parameter(name: 'podRetention', type: 'Map'), parameter(name: 'serviceAccount', type: 'java.lang.String'), parameter(name: 'showRawYaml', type: 'boolean'), parameter(name: 'slaveConnectTimeout', type: 'int'), parameter(name: 'volumes', type: 'java.util.List'), parameter(name: 'workingDir', type: 'java.lang.String'), parameter(name: 'workspaceVolume', type: 'Map'), parameter(name: 'yaml', type: 'java.lang.String'), parameter(name: 'yamlMergeStrategy', type: 'Map'), ], doc: 'Define a podTemplate to use in the kubernetes plugin')
        method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')

        property(name: 'openshift', type: 'com.openshift.jenkins.plugins.pipeline.OpenShiftGlobalVariable')
        property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
        property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
        property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
        property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
        property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
        property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
        property(name: 'fileLoader', type: 'org.jenkinsci.plugins.workflow.remoteloader.FileLoaderDSL')

        method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
        method(name: 'cfnCreateChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create CloudFormation change set')
        method(name: 'cfnUpdate', type: 'Object', params: [stack:'java.lang.String'], doc: 'Create or Update CloudFormation stack')
        method(name: 'cfnUpdate', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'enableTerminationProtection', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation stack')
        method(name: 'cfnValidate', type: 'Object', params: [:], doc: 'Validate CloudFormation template')
        method(name: 'cfnValidate', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Validate CloudFormation template')
        method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Check out from version control')
        method(name: 'containerLog', type: 'Object', params: [name:'java.lang.String'], doc: 'Get container log from Kubernetes')
        method(name: 'containerLog', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'limitBytes', type: 'int'), parameter(name: 'returnLog', type: 'boolean'), parameter(name: 'sinceSeconds', type: 'int'), parameter(name: 'tailingLines', type: 'int'), ], doc: 'Get container log from Kubernetes')
        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
        method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
        method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
        method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
        method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
        method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
        method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
        method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'java.util.List'), ], doc: 'Archive JUnit-formatted test results')
        method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
        method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
        method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Script')
        method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
        method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
        method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
        method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
        method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
        method(name: 's3DoesObjectExist', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Check if object exists in S3')
        method(name: 's3Download', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'force', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Copy file from S3')
        method(name: 's3FindFiles', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Find files in S3')
        method(name: 's3FindFiles', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'onlyFiles', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Find files in S3')
        method(name: 's3PresignURL', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'key', type: 'java.lang.String'), parameter(name: 'httpMethod', type: 'java.lang.String'), parameter(name: 'durationInSeconds', type: 'java.lang.Integer'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Presign file in S3')
        method(name: 's3Upload', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Copy file to S3')
        method(name: 's3Upload', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentEncoding', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'excludePathPattern', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'includePathPattern', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'redirectLocation', type: 'java.lang.String'), parameter(name: 'sseAlgorithm', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'verbose', type: 'boolean'), parameter(name: 'workingDir', type: 'java.lang.String'), ], doc: 'Copy file to S3')
        method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
        method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
        method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
        method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
        method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
        method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
        method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
        method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
        method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
        method(name: 'updateIdP', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'metadata', type: 'java.lang.String'), ], doc: 'Update thirdparty Identity Provider')
        method(name: 'updateTrustPolicy', type: 'Object', namedParams: [parameter(name: 'roleName', type: 'java.lang.String'), parameter(name: 'policyFile', type: 'java.lang.String'), ], doc: 'Update trust policy of IAM roles')
        method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
        method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
        method(name: 'writeCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'records', type: 'java.lang.Iterable'), parameter(name: 'format', type: 'Map'), ], doc: 'Write content to a CSV file in the workspace.')
        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
        method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), parameter(name: 'pretty', type: 'int'), ], doc: 'Write JSON to a file in the workspace.')
        method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
        method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
        method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), ], doc: 'Write a yaml from an object.')
        method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
        method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
        method(name: '_OcAction', type: 'Object', namedParams: [parameter(name: 'server', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'skipTLSVerify', type: 'boolean'), parameter(name: 'caPath', type: 'java.lang.String'), parameter(name: 'verb', type: 'java.lang.String'), parameter(name: 'advArgs', type: 'java.util.List'), parameter(name: 'verbArgs', type: 'java.util.List'), parameter(name: 'userArgs', type: 'java.util.List'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'streamStdOutToConsolePrefix', type: 'java.lang.String'), parameter(name: 'reference', type: 'Map'), parameter(name: 'logLevel', type: 'int'), ], doc: 'Internal utility function for OpenShift DSL')
        method(name: '_OcContextInit', type: 'Object', params: [:], doc: 'Advanced/Deprecated Internal utility function for OpenShift DSL')
        method(name: '_OcWatch', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'server', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'skipTLSVerify', type: 'boolean'), parameter(name: 'caPath', type: 'java.lang.String'), parameter(name: 'verb', type: 'java.lang.String'), parameter(name: 'advArgs', type: 'java.util.List'), parameter(name: 'verbArgs', type: 'java.util.List'), parameter(name: 'userArgs', type: 'java.util.List'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'logLevel', type: 'int'), ], doc: 'Internal utility function for OpenShift DSL')
        method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
        method(name: 'container', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps in a container')
        method(name: 'container', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'shell', type: 'java.lang.String'), ], doc: 'Run build steps in a container')
        method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'commandLine', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
        method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'java.util.Map'), ], doc: 'Copy archived artifacts into the workspace')
        method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
        method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
        method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
        method(name: 'withDockerRegistry', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'registry', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Sets up Docker registry endpoint')
        method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }

    // Post actions!
    if (enclosingCall("post")) {
        method(name: 'always', type: 'Object', params: [body: 'Closure'])
        method(name: 'success', type: 'Object', params: [body: 'Closure'])
        method(name: 'failure', type: 'Object', params: [body: 'Closure'])
        method(name: 'unstable', type: 'Object', params: [body: 'Closure'])
        method(name: 'changed', type: 'Object', params: [body: 'Closure'])
        method(name: 'cleanup', type: 'Object', params: [body: 'Closure'])
    }
}
